<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xt</title>
    <description>Linux, Containers ( Docker ), Orchestration ( Kubernetes ), DevOps (.*) -- Oh My!   And other wanderings and ramblings.
</description>
    <link>http://cognitiaclaeves.github.io/</link>
    <atom:link href="http://cognitiaclaeves.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 12 Mar 2016 05:58:15 +0000</pubDate>
    <lastBuildDate>Sat, 12 Mar 2016 05:58:15 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Blogging with VDJG: Part 1.5 - Vagrant, Docker &amp; Jekyll - Shortcut!</title>
        <description>&lt;p&gt;I just finished going through all of the steps of how I created the vagrant-docker-jekyll combo that I use to blog with.&lt;/p&gt;

&lt;p&gt;… And then I realized … the whole point of vagrant and docker is to be able to create an environment that can be replicated … so it should theoretically be possible for me to set up the entire environment and provide a few short lines to get the whole thing working, right?  Right.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/phusion/baseimage-docker.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;baseimage-docker
mkdir data
curl https://raw.githubusercontent.com/cognitiaclaeves/source.cognitiaclaeves.github.io/develop/source-files/Vagrantfile &amp;gt; Vagrantfile
curl https://raw.githubusercontent.com/cognitiaclaeves/source.cognitiaclaeves.github.io/develop/source-files/exec-jekyll.sh &amp;gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;-jekyll.sh
chmod +x &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;-jekyll.sh
vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 08 Mar 2016 23:00:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut</guid>
        
        <category>blogging-w-vdjg</category>
        
        <category>vagrant</category>
        
        <category>docker</category>
        
        <category>github</category>
        
        <category>jekyll</category>
        
        <category>blogging</category>
        
        
        <category>light</category>
        
      </item>
    
      <item>
        <title>Blogging with VDJG: Part 1.5 - Vagrant, Docker &amp; Jekyll - Shortcut!</title>
        <description>&lt;p&gt;I just finished going through all of the steps of how I created the vagrant-docker-jekyll combo that I use to blog with.&lt;/p&gt;

&lt;p&gt;… And then I realized … the whole point of vagrant and docker is to be able to create an environment that can be replicated … so it should theoretically be possible for me to set up the entire environment and provide a few short lines to get the whole thing working, right?  Right.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/phusion/baseimage-docker.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;baseimage-docker
mkdir data
curl https://raw.githubusercontent.com/cognitiaclaeves/source.cognitiaclaeves.github.io/develop/source-files/Vagrantfile &amp;gt; Vagrantfile
curl https://raw.githubusercontent.com/cognitiaclaeves/source.cognitiaclaeves.github.io/develop/source-files/exec-jekyll.sh &amp;gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;-jekyll.sh
chmod +x &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;-jekyll.sh
vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 08 Mar 2016 23:00:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/dark/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/dark/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut</guid>
        
        <category>blogging-w-vdjg</category>
        
        <category>vagrant</category>
        
        <category>docker</category>
        
        <category>github</category>
        
        <category>jekyll</category>
        
        <category>blogging</category>
        
        
        <category>dark</category>
        
      </item>
    
      <item>
        <title>Blogging with VDJG: Part 1 - Vagrant, Docker &amp; Jekyll</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This blog is set up to be able to add and view new entries offline ( as text files ), and then push changes into a source repository to trigger live site updates ( as website files ). I use a Jekyll Docker container running in Vagrant to take the site from text files to HTML.&lt;/p&gt;

  &lt;p&gt;My process was inspired by a blogging process demonstrated by Boyd Boyd Hemphill at a devops / docker / cloud meetup, which he published on &lt;a href=&quot;http://behemphi.github.io/github-pages/docker/2015/12/02/github-pages-with-docker.html&quot;&gt;his blog&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;This series covers the process I set up, in detail. In the first part, I cover everything short of publishing it live. In the second part, I cover publishing it live, and in the third part, I cover what it looks like when I create a new blog entry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like to show all my work.  But if you just want to get a blog up in a hurry with this method, I made a &lt;a href=&quot;/dark/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut&quot;&gt;short cut&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;( This post is currently in progress; there will be clean-up later. )&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/personal
➔ mkdir phusion-jekyll; cd phusion-jekyll

~/personal/phusion-jekyll
➔ git clone https://github.com/phusion/baseimage-docker.git
Cloning into &amp;#39;baseimage-docker&amp;#39;...
remote: Counting objects: 1193, done.
remote: Total 1193 (delta 0), reused 0 (delta 0), pack-reused 1193
Receiving objects: 100% (1193/1193), 1.48 MiB | 1.57 MiB/s, done.
Resolving deltas: 100% (699/699), done.
Checking connectivity... done.

~/personal/phusion-jekyll
➔ cd baseimage-docker

personal/phusion-jekyll/baseimage-docker on master
➔ ls
CONTRIBUTING.md Makefile README_zh_tw.md install-tools.sh
Changelog.md README.md Vagrantfile test
LICENSE.txt README_ZH_cn_.md image tools

personal/phusion-jekyll/baseimage-docker on master
➔ vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Warning: The next line causes vagrant to allow running VM instance to access the files on your local machine. Know what you’re doing when you give any VM or container access to your local machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the sake of convenience, I want a folder in the VM to directly reference my work folder (future github) folder, so I add this line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.vm.synced_folder &quot;data&quot;, &quot;/home/vagrant/data&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;➔ tail -6 Vagrantfile
    config.vm.provision :shell, :inline =&amp;gt; $script
  end

  config.vm.synced_folder &amp;quot;data&amp;quot;, &amp;quot;/home/vagrant/data&amp;quot;

end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I create the data folder and restart the vagrant box:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;personal/phusion-jekyll/baseimage-docker on master [!]
➔ mkdir data; vagrant halt; vagrant up

==&amp;gt; default: Attempting graceful shutdown of VM...

Bringing machine &amp;#39;default&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider...
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My new folder is at the top of this list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;==&amp;gt; default: Mounting shared folders...
default: /home/vagrant/data =&amp;gt; /Users/jno/personal/phusion-jekyll/baseimage-docker/data
default: /vagrant/baseimage-docker =&amp;gt; /Users/jno/personal/phusion-jekyll/baseimage-docker
default: /vagrant =&amp;gt; /Users/jno/personal/phusion-jekyll/baseimage-docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I run the following in the vagrant session, to build the initial files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd data
docker run \
  --interactive \
  --label=jekyll \
  --publish 4000:4000 \
  --rm \ 
  --tty \
  --volume=$(pwd):/srv/jekyll 
  jekyll/jekyll:pages jekyll new . --force&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The volume specification above is similar to the shared folder mount earlier, except for containers. At this time, this is considered more dangerous, by some. In this case, it’s pretty safe, as it only allows the docker container direct access to a path in the VM, and not your localhost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was going to include a screenshot here of what it should look like when the above command is run, but I spent the time making the &lt;a href=&quot;/dark/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut&quot;&gt;short cut&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;.. and create this file (phusion-jekyll/baseimage-docker/exec-jekyll.sh), to run the jekyll container:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/vagrant/data
docker stop jekyll_runtime 2&amp;gt; /dev/null
docker rm -v jekyll_runtime 2&amp;gt; /dev/null
docker run &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --env &lt;span class=&quot;nv&quot;&gt;FORCE_POLLING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --env &lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;development &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --env &lt;span class=&quot;nv&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --label&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jekyll &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jekyll_runtime &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --publish &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.0.0:4000:80&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --rm &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --volume&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(pwd):/srv/jekyll&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    jekyll/jekyll:pages jekyll build --watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… and make the file executable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;➔ chmod +x exec-jekyll.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To make the webserver in the container accessible, and to execute my new script, I add these lines to the Vagrantfile that I edited before:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...

  config.vm.synced_folder &amp;quot;data&amp;quot;, &amp;quot;/home/vagrant/data&amp;quot;
  config.vm.network :forwarded_port, guest: 4000, host: 4000
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;exec-jekyll.sh&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;vagrant provision&lt;/code&gt; runs the script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;personal/phusion-jekyll/baseimage-docker on master [!]
➔ vagrant provision
==&amp;gt; default: Running provisioner: shell...
        default: Running: /var/folders/9s/320v29913qs9j6kzxnqv7smclw01rh/T/vagrant-shell201
60302-97040-1s32frt.sh
==&amp;gt; default: stdin: is not a tty
==&amp;gt; default: jekyll_runtime
==&amp;gt; default: Github does not allow user dependencies.
==&amp;gt; default: Configuration file: /srv/jekyll/_config.yml
==&amp;gt; default: Source: /srv/jekyll
==&amp;gt; default: Destination: /srv/jekyll/_site
==&amp;gt; default: Generating...
==&amp;gt; default: done.
==&amp;gt; default: Auto-regeneration: enabled for &amp;#39;/srv/jekyll&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I can browse to: http://localhost:4000, and click on the “Welcome to Jekyll” link.&lt;/p&gt;

&lt;p&gt;This link was generated from data/_posts/[date]-welcome-to-jekyll.markdown&lt;/p&gt;

&lt;p&gt;I switch to another terminal and edit the file locally:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post_dark&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Welcome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Jekyll!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll update&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;You’ll find this post in your `_posts` directory. ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I change the above to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post_dark&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Welcome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Jekyll!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll update&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;You’ll find this SAMPLE post in your `_posts` directory. ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and when I save the file, I see activity in the previous terminal session:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
==&amp;gt; default: done.
==&amp;gt; default: Auto-regeneration: enabled for &amp;#39;/srv/jekyll&amp;#39;
==&amp;gt; default: Regenerating: 1 file(s) changed at 2016-03-02 23:47:21&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, when I refresh the localhost:4000, it’s updated!&lt;/p&gt;

&lt;p&gt;When I’m finished updating my site, I take the vagrant box down:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;==&amp;gt; default:       Regenerating: 1 file(s) changed at 2016-03-03 15:00:13
==&amp;gt; default: ...done in 0.860794742 seconds.
^C==&amp;gt; default: Waiting for cleanup before exiting...
^C==&amp;gt; default: Exiting immediately, without cleanup!

personal/phusion-jekyll/baseimage-docker on master [!?]
➔ vagrant halt
==&amp;gt; default: Attempting graceful shutdown of VM...

personal/phusion-jekyll/baseimage-docker on master [!?]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s the process. Be sure to check out my shortcut for a handy script that does all the work for you!&lt;/p&gt;

&lt;p&gt;I actually do a little more work to get the switchable theme in my static website. This work amounts to mangling the generated files with the use of a bash and a python script.&lt;/p&gt;

&lt;p&gt;For the next blog in this series, I’ll post how to easily work github pages into this, and then my steps to create a new blog entry, after all the setup is done.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 08:08:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/dark/blog/Blogging-with-Vagrant-Docker-Jekyll-Github</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/dark/blog/Blogging-with-Vagrant-Docker-Jekyll-Github</guid>
        
        <category>blogging-w-vdjg</category>
        
        <category>vagrant</category>
        
        <category>docker</category>
        
        <category>github</category>
        
        <category>jekyll</category>
        
        <category>blogging</category>
        
        
        <category>dark</category>
        
      </item>
    
      <item>
        <title>Blogging with VDJG: Part 1 - Vagrant, Docker &amp; Jekyll</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This blog is set up to be able to add and view new entries offline ( as text files ), and then push changes into a source repository to trigger live site updates ( as website files ). I use a Jekyll Docker container running in Vagrant to take the site from text files to HTML.&lt;/p&gt;

  &lt;p&gt;My process was inspired by a blogging process demonstrated by Boyd Boyd Hemphill at a devops / docker / cloud meetup, which he published on &lt;a href=&quot;http://behemphi.github.io/github-pages/docker/2015/12/02/github-pages-with-docker.html&quot;&gt;his blog&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;This series covers the process I set up, in detail. In the first part, I cover everything short of publishing it live. In the second part, I cover publishing it live, and in the third part, I cover what it looks like when I create a new blog entry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like to show all my work.  But if you just want to get a blog up in a hurry with this method, I made a &lt;a href=&quot;/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut&quot;&gt;short cut&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;( This post is currently in progress; there will be clean-up later. )&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;~/personal
➔ mkdir phusion-jekyll; cd phusion-jekyll

~/personal/phusion-jekyll
➔ git clone https://github.com/phusion/baseimage-docker.git
Cloning into &amp;#39;baseimage-docker&amp;#39;...
remote: Counting objects: 1193, done.
remote: Total 1193 (delta 0), reused 0 (delta 0), pack-reused 1193
Receiving objects: 100% (1193/1193), 1.48 MiB | 1.57 MiB/s, done.
Resolving deltas: 100% (699/699), done.
Checking connectivity... done.

~/personal/phusion-jekyll
➔ cd baseimage-docker

personal/phusion-jekyll/baseimage-docker on master
➔ ls
CONTRIBUTING.md Makefile README_zh_tw.md install-tools.sh
Changelog.md README.md Vagrantfile test
LICENSE.txt README_ZH_cn_.md image tools

personal/phusion-jekyll/baseimage-docker on master
➔ vagrant up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Warning: The next line causes vagrant to allow running VM instance to access the files on your local machine. Know what you’re doing when you give any VM or container access to your local machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the sake of convenience, I want a folder in the VM to directly reference my work folder (future github) folder, so I add this line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.vm.synced_folder &quot;data&quot;, &quot;/home/vagrant/data&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;➔ tail -6 Vagrantfile
    config.vm.provision :shell, :inline =&amp;gt; $script
  end

  config.vm.synced_folder &amp;quot;data&amp;quot;, &amp;quot;/home/vagrant/data&amp;quot;

end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I create the data folder and restart the vagrant box:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;personal/phusion-jekyll/baseimage-docker on master [!]
➔ mkdir data; vagrant halt; vagrant up

==&amp;gt; default: Attempting graceful shutdown of VM...

Bringing machine &amp;#39;default&amp;#39; up with &amp;#39;virtualbox&amp;#39; provider...
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My new folder is at the top of this list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;==&amp;gt; default: Mounting shared folders...
default: /home/vagrant/data =&amp;gt; /Users/jno/personal/phusion-jekyll/baseimage-docker/data
default: /vagrant/baseimage-docker =&amp;gt; /Users/jno/personal/phusion-jekyll/baseimage-docker
default: /vagrant =&amp;gt; /Users/jno/personal/phusion-jekyll/baseimage-docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I run the following in the vagrant session, to build the initial files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd data
docker run \
  --interactive \
  --label=jekyll \
  --publish 4000:4000 \
  --rm \ 
  --tty \
  --volume=$(pwd):/srv/jekyll 
  jekyll/jekyll:pages jekyll new . --force&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The volume specification above is similar to the shared folder mount earlier, except for containers. At this time, this is considered more dangerous, by some. In this case, it’s pretty safe, as it only allows the docker container direct access to a path in the VM, and not your localhost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was going to include a screenshot here of what it should look like when the above command is run, but I spent the time making the &lt;a href=&quot;/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut&quot;&gt;short cut&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;.. and create this file (phusion-jekyll/baseimage-docker/exec-jekyll.sh), to run the jekyll container:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/vagrant/data
docker stop jekyll_runtime 2&amp;gt; /dev/null
docker rm -v jekyll_runtime 2&amp;gt; /dev/null
docker run &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --env &lt;span class=&quot;nv&quot;&gt;FORCE_POLLING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --env &lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;development &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --env &lt;span class=&quot;nv&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --label&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jekyll &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jekyll_runtime &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --publish &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.0.0.0:4000:80&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --rm &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    --volume&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(pwd):/srv/jekyll&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    jekyll/jekyll:pages jekyll build --watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… and make the file executable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;➔ chmod +x exec-jekyll.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To make the webserver in the container accessible, and to execute my new script, I add these lines to the Vagrantfile that I edited before:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...

  config.vm.synced_folder &amp;quot;data&amp;quot;, &amp;quot;/home/vagrant/data&amp;quot;
  config.vm.network :forwarded_port, guest: 4000, host: 4000
  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;exec-jekyll.sh&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;vagrant provision&lt;/code&gt; runs the script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;personal/phusion-jekyll/baseimage-docker on master [!]
➔ vagrant provision
==&amp;gt; default: Running provisioner: shell...
        default: Running: /var/folders/9s/320v29913qs9j6kzxnqv7smclw01rh/T/vagrant-shell201
60302-97040-1s32frt.sh
==&amp;gt; default: stdin: is not a tty
==&amp;gt; default: jekyll_runtime
==&amp;gt; default: Github does not allow user dependencies.
==&amp;gt; default: Configuration file: /srv/jekyll/_config.yml
==&amp;gt; default: Source: /srv/jekyll
==&amp;gt; default: Destination: /srv/jekyll/_site
==&amp;gt; default: Generating...
==&amp;gt; default: done.
==&amp;gt; default: Auto-regeneration: enabled for &amp;#39;/srv/jekyll&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I can browse to: http://localhost:4000, and click on the “Welcome to Jekyll” link.&lt;/p&gt;

&lt;p&gt;This link was generated from data/_posts/[date]-welcome-to-jekyll.markdown&lt;/p&gt;

&lt;p&gt;I switch to another terminal and edit the file locally:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Welcome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Jekyll!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll update&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;You’ll find this post in your `_posts` directory. ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I change the above to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Welcome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Jekyll!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll update&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;You’ll find this SAMPLE post in your `_posts` directory. ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and when I save the file, I see activity in the previous terminal session:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
==&amp;gt; default: done.
==&amp;gt; default: Auto-regeneration: enabled for &amp;#39;/srv/jekyll&amp;#39;
==&amp;gt; default: Regenerating: 1 file(s) changed at 2016-03-02 23:47:21&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, when I refresh the localhost:4000, it’s updated!&lt;/p&gt;

&lt;p&gt;When I’m finished updating my site, I take the vagrant box down:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;==&amp;gt; default:       Regenerating: 1 file(s) changed at 2016-03-03 15:00:13
==&amp;gt; default: ...done in 0.860794742 seconds.
^C==&amp;gt; default: Waiting for cleanup before exiting...
^C==&amp;gt; default: Exiting immediately, without cleanup!

personal/phusion-jekyll/baseimage-docker on master [!?]
➔ vagrant halt
==&amp;gt; default: Attempting graceful shutdown of VM...

personal/phusion-jekyll/baseimage-docker on master [!?]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s the process. Be sure to check out my shortcut for a handy script that does all the work for you!&lt;/p&gt;

&lt;p&gt;I actually do a little more work to get the switchable theme in my static website. This work amounts to mangling the generated files with the use of a bash and a python script.&lt;/p&gt;

&lt;p&gt;For the next blog in this series, I’ll post how to easily work github pages into this, and then my steps to create a new blog entry, after all the setup is done.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Mar 2016 08:08:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Github</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Github</guid>
        
        <category>blogging-w-vdjg</category>
        
        <category>vagrant</category>
        
        <category>docker</category>
        
        <category>github</category>
        
        <category>jekyll</category>
        
        <category>blogging</category>
        
        
        <category>light</category>
        
      </item>
    
      <item>
        <title>Holy Atomic Operating Systems, Batman!</title>
        <description>&lt;p&gt;This one is going to be short. My company has a weekly ‘Docker Roundup’ that the ‘Misfits of Docker’ participate in. We use an hour each week to explore what all of us are working on that’s related to containers and container orchestration.&lt;/p&gt;

&lt;p&gt;Additionally, we’ve recently started having a ‘theme’ for the meeting, a task to accomplish related to containers or container orchestration.&lt;/p&gt;

&lt;p&gt;For the last one, I requested that we cover Atomic Hosts. We followed &lt;a href=&quot;http://www.projectatomic.io/docs/gettingstarted/&quot;&gt;this guide&lt;/a&gt; – I should point out that we followed the directions almost exactly, even though some strings had changed, with the exception of the 192.* IP addresses.  We replicated the steps on an AWS cluster.&lt;/p&gt;

&lt;p&gt;It was a bit odd to instantiate a pod directly in kubernetes ( rather than a replication controller ), so we moved onto another guide that included an expose command, and that’s about where our success ended: Amazon and Kubernetes don’t know each other well enough for Amazon to respond to the expose command.&lt;/p&gt;

&lt;p&gt;Other than that, though, the experience went pretty well: We were able to get a modern kubernetes cluster working that could create a single pod ( or replicated pods ) in under an hour. This was, by far, the fastest way to get a kubernetes cluster working on the cloud. Everything else that we’ve tried - CentOS guides and coreOS guides - have resulted in more work than an hour’s worth. Recently I found one in Kubernetes/Contrib that uses Vagrant to set up the entire cluster, but doesn’t work – at least not without OpenStack.&lt;/p&gt;

</description>
        <pubDate>Thu, 03 Mar 2016 07:01:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/light/blog/Holy-Atomic-Operating-Systems-Batman</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/light/blog/Holy-Atomic-Operating-Systems-Batman</guid>
        
        <category>docker</category>
        
        <category>atomichost</category>
        
        <category>kubernetes</category>
        
        
        <category>light</category>
        
      </item>
    
      <item>
        <title>Holy Atomic Operating Systems, Batman!</title>
        <description>&lt;p&gt;This one is going to be short. My company has a weekly ‘Docker Roundup’ that the ‘Misfits of Docker’ participate in. We use an hour each week to explore what all of us are working on that’s related to containers and container orchestration.&lt;/p&gt;

&lt;p&gt;Additionally, we’ve recently started having a ‘theme’ for the meeting, a task to accomplish related to containers or container orchestration.&lt;/p&gt;

&lt;p&gt;For the last one, I requested that we cover Atomic Hosts. We followed &lt;a href=&quot;http://www.projectatomic.io/docs/gettingstarted/&quot;&gt;this guide&lt;/a&gt; – I should point out that we followed the directions almost exactly, even though some strings had changed, with the exception of the 192.* IP addresses.  We replicated the steps on an AWS cluster.&lt;/p&gt;

&lt;p&gt;It was a bit odd to instantiate a pod directly in kubernetes ( rather than a replication controller ), so we moved onto another guide that included an expose command, and that’s about where our success ended: Amazon and Kubernetes don’t know each other well enough for Amazon to respond to the expose command.&lt;/p&gt;

&lt;p&gt;Other than that, though, the experience went pretty well: We were able to get a modern kubernetes cluster working that could create a single pod ( or replicated pods ) in under an hour. This was, by far, the fastest way to get a kubernetes cluster working on the cloud. Everything else that we’ve tried - CentOS guides and coreOS guides - have resulted in more work than an hour’s worth. Recently I found one in Kubernetes/Contrib that uses Vagrant to set up the entire cluster, but doesn’t work – at least not without OpenStack.&lt;/p&gt;

</description>
        <pubDate>Thu, 03 Mar 2016 07:01:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/dark/blog/Holy-Atomic-Operating-Systems-Batman</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/dark/blog/Holy-Atomic-Operating-Systems-Batman</guid>
        
        <category>docker</category>
        
        <category>atomichost</category>
        
        <category>kubernetes</category>
        
        
        <category>dark</category>
        
      </item>
    
      <item>
        <title>The Next Blog</title>
        <description>&lt;h2 id=&quot;goodbye-wordpress&quot;&gt;Goodbye Wordpress&lt;/h2&gt;

&lt;p&gt;I lost my desire to blog with Wordpress the first time I watched it mangle my spacing, and then enforce whatever it was doing by not taking changes … until my efforts to make it  accept my deisred whitespace wiped out the entire post. I remember feeling particularly angry that I had found a bug report mentioning this … that was … … years … old. Or maybe it was when I was messing around with themes, and I did something in the theme that caused the entire site not to load. Or maybe it was the day that I realized that all the posts are stored in a database, so there’s no easy way to backup. And restoring a Wordpress site? By the time I considered that nightmare, I was determined to avoid that level of hell by avoiding blogging altogether.&lt;/p&gt;

&lt;p&gt;It was beginning to feel a lot like Microsoft tech: big, bloated interfaces that save your data in secret places that are a nightmare to back up. … crashes, wasted time … wasted hours, days, ( which I projected would later be followed by weeks and months ).&lt;/p&gt;

&lt;p&gt;And I was supposed to maintain a spririt of creativity throught that? Shaking my fists at inanimate computer screens ( which aren’t even part of the problem ) – is not my idea of time well spent.&lt;/p&gt;

&lt;p&gt;My experience with Wordpress wasn’t all bad. It gave me standards for a blogging platform:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I wanted to be able to edit files off-line&lt;/li&gt;
  &lt;li&gt;I wanted the posts to be as effortless to maintain as possible&lt;/li&gt;
  &lt;li&gt;I didn’t want everything in a database&lt;/li&gt;
  &lt;li&gt;As a matter of fact, maybe not a dynamic site, at all&lt;/li&gt;
  &lt;li&gt;I wanted the data backed up to the cloud somewhere&lt;/li&gt;
  &lt;li&gt;I wanted solid revision control&lt;/li&gt;
  &lt;li&gt;I wanted the site to be easily restorable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve ever worked with Wordpress, you might notice that the list above is sort of the antithesis of Wordpress.&lt;/p&gt;

&lt;p&gt;And while I wanted convenience, I still wanted the end result to be more customizable ( and less expensive! ) than those website-in-a-box kind of places.&lt;/p&gt;

&lt;p&gt;And then I happened to see a demo where someone had married static site generation ( with Jekyll ) with devops style cleverness. ( I talk about how this site is set up &lt;a href=&quot;http://localhost:4000/tags/light/blogging-w-vdjg&quot;&gt;here&lt;/a&gt;. )&lt;/p&gt;

&lt;p&gt;I just knew this was my ticket to a blogging platform that would be a better fit for me.&lt;/p&gt;

&lt;p&gt;And it just so happened that this solution came with free revision control (backups) AND free hosting? I hadn’t even dared put on my list of standards that I didn’t want to manage a web hosting account for the site. I didn’t dream I’d find such a thing.&lt;/p&gt;

&lt;h2 id=&quot;hello-chaos&quot;&gt;Hello Chaos&lt;/h2&gt;

&lt;p&gt;So, I took the time to duplicate what I saw in the demo, and suddenly found myself confronted with a new, empty page; with chaos. Where the page was once taken up by “helpful” fluff of all kinds, now it was like the page was staring back at me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Well, what are you going to do now?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was a feeling similar to the feeling I had when I finally succeeded in switching to Linux: I had been used to hand-holding, and suddenly confronted with so much more potential than my hand-holding-conditioned mind could fathom. All of the layers that I had once been comfortably unaware of now held key clues that I needed to understand to use my system efficiently.&lt;/p&gt;

&lt;p&gt;What did I want?&lt;/p&gt;

&lt;p&gt;My mind boggled at the sheer potential. If I could do anything, what would I do?&lt;/p&gt;

&lt;p&gt;I wanted my blog to be friendly to human beings and different devices.  It seemed like Jekyll themes already considered mobile devices and computer screens, out of the box, but friendly to people? How could I ( who am not a web developer ) make such a thing? How would I make it human-friendly?&lt;/p&gt;

&lt;p&gt;That was when I remembered my favorite theme: Solarized – which has light and dark choices, both designed to be easy on the eyes. And that was when I realized, that if Jekyll builds static pages in files saved locally to my hard drive, then I could tap into my scripting aptitude to mangle the static files after the build, and create the effect of a dynamic ( theme-switchable ) site with all of the advantages of a static one.&lt;/p&gt;

&lt;p&gt;So, apparently, when confronted with chaos, I can build something that I would have never conceived of without staring down the void.&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Jan 2016 06:20:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/light/blog/The-Next-Blog</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/light/blog/The-Next-Blog</guid>
        
        <category>blogging</category>
        
        <category>blog design</category>
        
        <category>wordpress</category>
        
        <category>jekyll</category>
        
        <category>lifestyle</category>
        
        <category>linux</category>
        
        <category>oversharing</category>
        
        
        <category>light</category>
        
      </item>
    
      <item>
        <title>The Next Blog</title>
        <description>&lt;h2 id=&quot;goodbye-wordpress&quot;&gt;Goodbye Wordpress&lt;/h2&gt;

&lt;p&gt;I lost my desire to blog with Wordpress the first time I watched it mangle my spacing, and then enforce whatever it was doing by not taking changes … until my efforts to make it  accept my deisred whitespace wiped out the entire post. I remember feeling particularly angry that I had found a bug report mentioning this … that was … … years … old. Or maybe it was when I was messing around with themes, and I did something in the theme that caused the entire site not to load. Or maybe it was the day that I realized that all the posts are stored in a database, so there’s no easy way to backup. And restoring a Wordpress site? By the time I considered that nightmare, I was determined to avoid that level of hell by avoiding blogging altogether.&lt;/p&gt;

&lt;p&gt;It was beginning to feel a lot like Microsoft tech: big, bloated interfaces that save your data in secret places that are a nightmare to back up. … crashes, wasted time … wasted hours, days, ( which I projected would later be followed by weeks and months ).&lt;/p&gt;

&lt;p&gt;And I was supposed to maintain a spririt of creativity throught that? Shaking my fists at inanimate computer screens ( which aren’t even part of the problem ) – is not my idea of time well spent.&lt;/p&gt;

&lt;p&gt;My experience with Wordpress wasn’t all bad. It gave me standards for a blogging platform:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I wanted to be able to edit files off-line&lt;/li&gt;
  &lt;li&gt;I wanted the posts to be as effortless to maintain as possible&lt;/li&gt;
  &lt;li&gt;I didn’t want everything in a database&lt;/li&gt;
  &lt;li&gt;As a matter of fact, maybe not a dynamic site, at all&lt;/li&gt;
  &lt;li&gt;I wanted the data backed up to the cloud somewhere&lt;/li&gt;
  &lt;li&gt;I wanted solid revision control&lt;/li&gt;
  &lt;li&gt;I wanted the site to be easily restorable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve ever worked with Wordpress, you might notice that the list above is sort of the antithesis of Wordpress.&lt;/p&gt;

&lt;p&gt;And while I wanted convenience, I still wanted the end result to be more customizable ( and less expensive! ) than those website-in-a-box kind of places.&lt;/p&gt;

&lt;p&gt;And then I happened to see a demo where someone had married static site generation ( with Jekyll ) with devops style cleverness. ( I talk about how this site is set up &lt;a href=&quot;http://localhost:4000/tags/dark/blogging-w-vdjg&quot;&gt;here&lt;/a&gt;. )&lt;/p&gt;

&lt;p&gt;I just knew this was my ticket to a blogging platform that would be a better fit for me.&lt;/p&gt;

&lt;p&gt;And it just so happened that this solution came with free revision control (backups) AND free hosting? I hadn’t even dared put on my list of standards that I didn’t want to manage a web hosting account for the site. I didn’t dream I’d find such a thing.&lt;/p&gt;

&lt;h2 id=&quot;hello-chaos&quot;&gt;Hello Chaos&lt;/h2&gt;

&lt;p&gt;So, I took the time to duplicate what I saw in the demo, and suddenly found myself confronted with a new, empty page; with chaos. Where the page was once taken up by “helpful” fluff of all kinds, now it was like the page was staring back at me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Well, what are you going to do now?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was a feeling similar to the feeling I had when I finally succeeded in switching to Linux: I had been used to hand-holding, and suddenly confronted with so much more potential than my hand-holding-conditioned mind could fathom. All of the layers that I had once been comfortably unaware of now held key clues that I needed to understand to use my system efficiently.&lt;/p&gt;

&lt;p&gt;What did I want?&lt;/p&gt;

&lt;p&gt;My mind boggled at the sheer potential. If I could do anything, what would I do?&lt;/p&gt;

&lt;p&gt;I wanted my blog to be friendly to human beings and different devices.  It seemed like Jekyll themes already considered mobile devices and computer screens, out of the box, but friendly to people? How could I ( who am not a web developer ) make such a thing? How would I make it human-friendly?&lt;/p&gt;

&lt;p&gt;That was when I remembered my favorite theme: Solarized – which has light and dark choices, both designed to be easy on the eyes. And that was when I realized, that if Jekyll builds static pages in files saved locally to my hard drive, then I could tap into my scripting aptitude to mangle the static files after the build, and create the effect of a dynamic ( theme-switchable ) site with all of the advantages of a static one.&lt;/p&gt;

&lt;p&gt;So, apparently, when confronted with chaos, I can build something that I would have never conceived of without staring down the void.&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Jan 2016 06:20:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/dark/blog/The-Next-Blog</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/dark/blog/The-Next-Blog</guid>
        
        <category>blogging</category>
        
        <category>blog design</category>
        
        <category>wordpress</category>
        
        <category>jekyll</category>
        
        <category>lifestyle</category>
        
        <category>linux</category>
        
        <category>oversharing</category>
        
        
        <category>dark</category>
        
      </item>
    
      <item>
        <title>Blog Fail</title>
        <description>&lt;p&gt;In my last post, I pretty much slammed Wordpress and mentioned that I was using a &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; container to convert simple paragraphs ( Markdown files ) into web pages. Well, when I went to update my blog with my first post, I ran into a few issues that meant that the post never actually made it onto the blog.&lt;/p&gt;

&lt;p&gt;Since I’m here at these crossroads now, I’ll blog about the issue that prevented Jekyll from working. In a word, the issue seems to be ‘docker-machine’.&lt;/p&gt;

&lt;p&gt;I’m relatively new to container tech. To get Docker running on my laptop ( MacBook Air ), I first went to Docker. They had a friendly Mac install, and I soon found myself running hello-world ( through VirtualBox ). I don’t recall why, but I also found myself checking out Vagrant. Through &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt;, I found myself running a similar container. I didn’t really see the difference between the two.&lt;/p&gt;

&lt;p&gt;Well, one possible difference concerns the issue that I had with docker-machine when I tried to run the Jekyll container: docker doesn’t actually run on the Mac. Instead, docker-machine does this weird thing where it sets environment variables, and the docker command can then be magically accessed. At least for a while. In the case of the Jekyll container, when I was originally setting up my blog, I had set up the container with no issues, and then run it many times, with no issues. Then I had shut down the container. I had anticipated that it would just sit there, and be ready when I needed it. After all, it was a container: if it ran once successfully, since nothing persists in containers unless written to specially mounted volumes, then it should run perfectly, every time.&lt;/p&gt;

&lt;p&gt;As I mentioned, that was not the case. I was getting errors from docker. ( I have since stopped using docker-machine on the mac, so I can’t cite what they were. )&lt;/p&gt;

&lt;p&gt;I recalled that I had also seen this at work. I had been unable to find a solution on Google, and had ultimately found a post where an error that seemed fundamental enough that it really needed to be fixed, remained in an un-fixed state after some time. Months? Years? I really don’t recall. But I did know that I needed the thing I was working on to be fixed today, so I  reimplemented it using Vagrant instead:&lt;/p&gt;

&lt;p&gt;I recalled finding a nice &lt;a href=&quot;https://hub.docker.com/r/phusion/baseimage/&quot;&gt;image&lt;/a&gt; in a Vagrantfile produced by a group that calls themselves &lt;a href=&quot;http://www.phusion.nl&quot;&gt;Phusion&lt;/a&gt; when I was trying to get a container going with &lt;a href=&quot;https://hub.docker.com/r/grafana/grafana/&quot;&gt;grafana&lt;/a&gt; and &lt;a href=&quot;https://hub.docker.com/r/hopsoft/graphite-statsd/&quot;&gt;graphite&lt;/a&gt;. Instead of relying on magically accessing the docker command, a VM was created by Vagrant that itself ran docker.&lt;/p&gt;

&lt;p&gt;It could very well be that I’m just not running docker-machine the correct way. That maybe something happens when I shut my laptop and put it into sleep mode. Or maybe I need to shut down the terminal where I set the environment variables. However, when discussing this with my supervisor later that day, he commented that he had ditched docker-machine for Vagrant, as well. From a user-experience perspective, Vagrant just works.&lt;/p&gt;

&lt;p&gt;The Jekyll container approach to blogging on github was mentioned in a docker/cloud meetup that I went to. After the meetup, Boyd posted the link to &lt;a href=&quot;http://behemphi.github.io/github-pages/docker/2015/12/02/github-pages-with-docker.html&quot;&gt;his blog&lt;/a&gt; where he details how to set it up.&lt;/p&gt;

&lt;p&gt;Because I ran into the same issues that I ran into at work with docker-machine, I intend to set a Jekyll container environment up in Vagrant, which I consider to be much more stable.&lt;/p&gt;

&lt;p&gt;So the process will look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configure a github.io account&lt;/li&gt;
  &lt;li&gt;Install Vagrant and VirtualBox&lt;/li&gt;
  &lt;li&gt;Get and build the VM that runs Docker&lt;/li&gt;
  &lt;li&gt;Within the image, build the Jekyll image&lt;/li&gt;
  &lt;li&gt;Run the Jekyll image&lt;/li&gt;
  &lt;li&gt;Set up a base blog&lt;/li&gt;
  &lt;li&gt;Make a change, commit the repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that I’ve listed the steps out, it doesn’t seem as straightforward as it did in my head. Then again, consider that what I am aiming to do is to build an environment that will convert simple paragraphs to a version-controlled ( backed up ) blog ( that can be worked on, though not updated ) without an internet connection – in effect, build a blogging platform that replaces the need for Wordpress ( for simple content ).&lt;/p&gt;

&lt;p&gt;I don’t mind taking a few extra steps to get this set up, so long as the end result is that I can run it at will, when I want to, and the work is backed up.&lt;/p&gt;

&lt;p&gt;Once this blog is set up, the creative process should look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vagrant up / vagrant resume&lt;/li&gt;
  &lt;li&gt;make local changes to markdown files&lt;/li&gt;
  &lt;li&gt;run mangling scripts ( for the dual-theme static site )&lt;/li&gt;
  &lt;li&gt;check local copy&lt;/li&gt;
  &lt;li&gt;commit changes to (web) source repo&lt;/li&gt;
  &lt;li&gt;vagrant halt / vagrant suspend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( all of that can be done without access to the net ), then, when the net is accessible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;push changes to source repo&lt;/li&gt;
  &lt;li&gt;cd into _site directory, push changes to site repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last step will result in updating the live site.&lt;/p&gt;

&lt;p&gt;Hmm. Still seems like a long list. But I think the tradeoff will be worth it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Update ( March 3, 2016 ) :&lt;/p&gt;

  &lt;p&gt;I’m now blogging with a Mac through a Vagrant-Docker-Jekyll combo. No mysterious “can’t access the VM / container issues”, though there was an odd caching issue with icons that I solved by removing all the icons and then restarting the vagrant box.&lt;/p&gt;

  &lt;p&gt;I’ll include all the steps I took to get this monster working soon!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 16 Jan 2016 10:08:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/dark/blog/Blog-Fail</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/dark/blog/Blog-Fail</guid>
        
        <category>jekyll</category>
        
        <category>docker</category>
        
        <category>docker-machine</category>
        
        <category>vagrant</category>
        
        <category>github</category>
        
        <category>git</category>
        
        <category>blogging</category>
        
        <category>oversharing</category>
        
        
        <category>dark</category>
        
      </item>
    
      <item>
        <title>Blog Fail</title>
        <description>&lt;p&gt;In my last post, I pretty much slammed Wordpress and mentioned that I was using a &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; container to convert simple paragraphs ( Markdown files ) into web pages. Well, when I went to update my blog with my first post, I ran into a few issues that meant that the post never actually made it onto the blog.&lt;/p&gt;

&lt;p&gt;Since I’m here at these crossroads now, I’ll blog about the issue that prevented Jekyll from working. In a word, the issue seems to be ‘docker-machine’.&lt;/p&gt;

&lt;p&gt;I’m relatively new to container tech. To get Docker running on my laptop ( MacBook Air ), I first went to Docker. They had a friendly Mac install, and I soon found myself running hello-world ( through VirtualBox ). I don’t recall why, but I also found myself checking out Vagrant. Through &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt;, I found myself running a similar container. I didn’t really see the difference between the two.&lt;/p&gt;

&lt;p&gt;Well, one possible difference concerns the issue that I had with docker-machine when I tried to run the Jekyll container: docker doesn’t actually run on the Mac. Instead, docker-machine does this weird thing where it sets environment variables, and the docker command can then be magically accessed. At least for a while. In the case of the Jekyll container, when I was originally setting up my blog, I had set up the container with no issues, and then run it many times, with no issues. Then I had shut down the container. I had anticipated that it would just sit there, and be ready when I needed it. After all, it was a container: if it ran once successfully, since nothing persists in containers unless written to specially mounted volumes, then it should run perfectly, every time.&lt;/p&gt;

&lt;p&gt;As I mentioned, that was not the case. I was getting errors from docker. ( I have since stopped using docker-machine on the mac, so I can’t cite what they were. )&lt;/p&gt;

&lt;p&gt;I recalled that I had also seen this at work. I had been unable to find a solution on Google, and had ultimately found a post where an error that seemed fundamental enough that it really needed to be fixed, remained in an un-fixed state after some time. Months? Years? I really don’t recall. But I did know that I needed the thing I was working on to be fixed today, so I  reimplemented it using Vagrant instead:&lt;/p&gt;

&lt;p&gt;I recalled finding a nice &lt;a href=&quot;https://hub.docker.com/r/phusion/baseimage/&quot;&gt;image&lt;/a&gt; in a Vagrantfile produced by a group that calls themselves &lt;a href=&quot;http://www.phusion.nl&quot;&gt;Phusion&lt;/a&gt; when I was trying to get a container going with &lt;a href=&quot;https://hub.docker.com/r/grafana/grafana/&quot;&gt;grafana&lt;/a&gt; and &lt;a href=&quot;https://hub.docker.com/r/hopsoft/graphite-statsd/&quot;&gt;graphite&lt;/a&gt;. Instead of relying on magically accessing the docker command, a VM was created by Vagrant that itself ran docker.&lt;/p&gt;

&lt;p&gt;It could very well be that I’m just not running docker-machine the correct way. That maybe something happens when I shut my laptop and put it into sleep mode. Or maybe I need to shut down the terminal where I set the environment variables. However, when discussing this with my supervisor later that day, he commented that he had ditched docker-machine for Vagrant, as well. From a user-experience perspective, Vagrant just works.&lt;/p&gt;

&lt;p&gt;The Jekyll container approach to blogging on github was mentioned in a docker/cloud meetup that I went to. After the meetup, Boyd posted the link to &lt;a href=&quot;http://behemphi.github.io/github-pages/docker/2015/12/02/github-pages-with-docker.html&quot;&gt;his blog&lt;/a&gt; where he details how to set it up.&lt;/p&gt;

&lt;p&gt;Because I ran into the same issues that I ran into at work with docker-machine, I intend to set a Jekyll container environment up in Vagrant, which I consider to be much more stable.&lt;/p&gt;

&lt;p&gt;So the process will look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configure a github.io account&lt;/li&gt;
  &lt;li&gt;Install Vagrant and VirtualBox&lt;/li&gt;
  &lt;li&gt;Get and build the VM that runs Docker&lt;/li&gt;
  &lt;li&gt;Within the image, build the Jekyll image&lt;/li&gt;
  &lt;li&gt;Run the Jekyll image&lt;/li&gt;
  &lt;li&gt;Set up a base blog&lt;/li&gt;
  &lt;li&gt;Make a change, commit the repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that I’ve listed the steps out, it doesn’t seem as straightforward as it did in my head. Then again, consider that what I am aiming to do is to build an environment that will convert simple paragraphs to a version-controlled ( backed up ) blog ( that can be worked on, though not updated ) without an internet connection – in effect, build a blogging platform that replaces the need for Wordpress ( for simple content ).&lt;/p&gt;

&lt;p&gt;I don’t mind taking a few extra steps to get this set up, so long as the end result is that I can run it at will, when I want to, and the work is backed up.&lt;/p&gt;

&lt;p&gt;Once this blog is set up, the creative process should look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vagrant up / vagrant resume&lt;/li&gt;
  &lt;li&gt;make local changes to markdown files&lt;/li&gt;
  &lt;li&gt;run mangling scripts ( for the dual-theme static site )&lt;/li&gt;
  &lt;li&gt;check local copy&lt;/li&gt;
  &lt;li&gt;commit changes to (web) source repo&lt;/li&gt;
  &lt;li&gt;vagrant halt / vagrant suspend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( all of that can be done without access to the net ), then, when the net is accessible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;push changes to source repo&lt;/li&gt;
  &lt;li&gt;cd into _site directory, push changes to site repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last step will result in updating the live site.&lt;/p&gt;

&lt;p&gt;Hmm. Still seems like a long list. But I think the tradeoff will be worth it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Update ( March 3, 2016 ) :&lt;/p&gt;

  &lt;p&gt;I’m now blogging with a Mac through a Vagrant-Docker-Jekyll combo. No mysterious “can’t access the VM / container issues”, though there was an odd caching issue with icons that I solved by removing all the icons and then restarting the vagrant box.&lt;/p&gt;

  &lt;p&gt;I’ll include all the steps I took to get this monster working soon!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 16 Jan 2016 10:08:00 +0000</pubDate>
        <link>http://cognitiaclaeves.github.io/light/blog/Blog-Fail</link>
        <guid isPermaLink="true">http://cognitiaclaeves.github.io/light/blog/Blog-Fail</guid>
        
        <category>jekyll</category>
        
        <category>docker</category>
        
        <category>docker-machine</category>
        
        <category>vagrant</category>
        
        <category>github</category>
        
        <category>git</category>
        
        <category>blogging</category>
        
        <category>oversharing</category>
        
        
        <category>light</category>
        
      </item>
    
  </channel>
</rss>
