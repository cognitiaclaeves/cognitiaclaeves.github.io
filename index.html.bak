<!DOCTYPE html>
<html>
<head>

  <meta charset="UTF-8">
  <title>Welcome to Z.T!</title>
  <meta name="viewport" content="width=device-width">

  <!--[if lt IE 9]>
    <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->

  <link href="/assets/css/style.css" rel="stylesheet" />
  <link href="/assets/css/colors-light.css" rel="stylesheet" />
  <link rel="icon" type="image/x-icon" href="/favicon.ico?">
  <link rel="icon" type="image/png" href="/images/favicon-32x32.png" sizes="32x32" />
  <link rel="icon" type="image/png" href="/images/favicon-16x16.png" sizes="16x16" />

</head>

<body>



  <header id="header">
  <!-- <h1><a href="/"><i class="icon-sun"></i> Zen Techie</a></h1> -->
  <h1><i class="icon-sun"></i> Zen Techie</h1>
  <a href="===INSERT_THEME_SWITCH_HERE===">===SWAP_THEME_NAME===</a>
    <p>Linux, Containers ( Docker ), Orchestration ( Kubernetes ), DevOps (.*) -- Oh My!   And other wanderings and ramblings.
</p>
  </header>



  <div id="page">



    <div id="sidebar">
      <nav>
        <ul>
          <li><a href="/light/">Home</a></li>
          <li><a href="/archives/light">Archive</a></li>
          <li><a href="/light/about">About</a></li>
	  <li><a href="http://twitter.com/cognitiaclaeves">Twitter</a></li>
          <li><a href="/feed.xml">RSS Feed</a></li>
        </ul>
      </nav>
    </div>


    <div id="content">
      
  

  
	<article class="post">

		
			<h1><a href="/light/blog/Initial-Thoughts-On-Ansible">Initial Thoughts on Ansbile</a></h1>
		

		
<div class="archive_meta_wrapper">
	<time datetime="2016-04-16">April 16, 2016</time>
	<ul class="tag_list">
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/configuration management">configuration management</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/ansible">ansible</a>
	    </li>
	  
	</ul>
</div>


		<div class="post-content"><p>At this point, I’ve read many blogs that paint a very rosy picture of Ansible.</p>

<p>My initial experience was not so rosy. In fact, it was pretty frustrating. In future blogs, I’ll provide examples. The purpose of this post is to record my initial impressions.</p>

<p>I become fixated on learning Ansible when I realized that I was starting to repeat the same patterns while maintaining servers, and worse, the steps that I took to maintain them were not being documented, so I’d have to remember how it went each time. This was manageable, up to a point. After that point, I started looking into configuration management systems.</p>

<p>I was working in a tight time-frame, one where I had not budgeted time for learning configuration management systems.</p>

<p>Our team currently uses Foreman to deploy servers within our department (in a Puppet fashion). The Foreman server is an undocumented mystery. And without it, apparently, new servers won’t be deployed.</p>

<p>The pull-deploy architecture of Puppet felt like the wrong direction to me.</p>

<p>I kept hearing about how a few employees here favored Ansible, so I looked into it.</p>

<p>A book was available on Safari ( Up And Running With Ansible ), so I read it. It took me about a week to make it through the book. ( I’m a slow reader, and it was a quick read. )</p>

<p>I immediately liked the push ( optional pull ) deploy architecture, and especially liked that ad-hoc commands could be entered on the command line. I also liked the design of roles, and that the modules were implemented to be idempotent. It looked like it was going to be smooth sailing from the start.</p>

<p>That, however, was not the case.</p>

<p>I found the restrictions of entering the instructions in YAML+Jinja2 to be rather unintuitive. What this looked like, in practice, for me was to try to enter instructions with no quotes, at first, and try to run it. If that failed, I’d add single quotes, then double quotes, and maybe double parentheses. When that failed, I’d arbitrarily switch around the quotes. And when that failed, I’d get on IRC and ask what I was doing wrong.</p>

<p>The error messages that I was seeing from Ansible didn’t seem to point to the line where the error occurred. It turns out, that I’d often be pointed to the beginning of the block of the instructions instead. It also happened that there would be useful information right at the beginning of the error, and right at the end would be the beginning of the block. There was plenty inbetween that was not useful and distracting.</p>

<p>It often seemed like I was ignored when I asked questions on IRC. But that seemed to get a little better with time. I was also a little unhospitable, at first. I was on a time-crunch, and the thing that stood in the way was not being able to interpret how I should be using quotes to correctly escape blocks of instructions.</p>

<p>Eventually, it became evident that one problem I was having was that I wasn’t running the latest version of Ansible. It was an easy upgrade and a shell script so that I didn’t need to remember the exact commands to pull the latest code down and getting it running in single instances of bash.</p>

<p>Another issue I was having was that Ansible seemed to sometimes treat json as an object, and sometimes as text. To make matters worse, I wasn’t really sure how to determine what the structure was of the variable I was working with. That was very aggravating, as the json provided by Kubernetes is non-trivial, and I wanted to parse it.</p>

<p>When I figured out how to write my own custom modules, and then my own custom filters, Ansible suddenly became a very usable tool.</p>

<p>Now my process looks like this: Write the instructions without any quotes; if it fails, correctly identify the block where the error is occuring and comment out lines that are more complex, until the block itself doesn’t error. Then add the lines back in, one at a time, until the error occurs. Add quotes / double-quotes and parentheses, if needed. If that fails, write a filter for what I’m trying to do instead, and then ask what I’m doing wrong on IRC.</p>

<p>Since I’ve now got a work-around, it’s not an issue for it to take some time to get a response. Though, in truth, it seems the responses are coming pretty quickly these days.</p>

<p>I’ve since heard about Salt.</p>

<p>I don’t really feel like I have time to learn another configuration management system, however, and Salt also uses a mast/minion architecture, which makes it seem like it would take longer to get running and learn.</p>

<p>I think Ansible is a good match for my grunge-style system administration tasks.</p>

</div>

	</article>

  

  
	<article class="post">

		
			<h1><a href="/light/blog/Quick-Update">Mar-April 2016 Update</a></h1>
		

		
<div class="archive_meta_wrapper">
	<time datetime="2016-04-16">April 16, 2016</time>
	<ul class="tag_list">
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/docker">docker</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/atomic host">atomic host</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/ansible">ansible</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/kubernetes">kubernetes</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/datastax">datastax</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/cassandra">cassandra</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/continuous integration">continuous integration</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/testing">testing</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/jenkins">jenkins</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/security">security</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging">blogging</a>
	    </li>
	  
	</ul>
</div>


		<div class="post-content"><p>Quick status update.</p>

<p>It seems like I’ve had absolutely no time lately.</p>

<p>I’ve been focusing on a number of new technologies at work: top on the list has been learning Ansible and creating playbooks to configure ‘stock’ atomic-host servers for kubernetes. I’ve got plenty to say about Ansible, so I plan on starting a series of posts on it in the very near future.</p>

<p>I have a few things to say about running Kubernetes “virtual metal”. It almost feels like no one else is doing this …</p>

<p>Last week we had a contractor from Datastax come in to go over the Datastax Enterprise stack. I’m still getting familiar with Datastax, Spark, SOLR, and Cassandra. There may be some posts about them a little further in the future.</p>

<p>Security is an ongoing theme while planning future microservices architecture running in  Kubernetes. I plan on posting some background on what we do to ensure our microservices infrastructure is secure enough for the financial sector.</p>

<p>Continuous integration is also around the corner. We’ll be using Jenkins to test out and deploy the docker containers and tests that come from developers. It became apparent while I was working through the process that there are a number of ways to do this sub-optimally, so I plan on covering this topic.</p>

</div>

	</article>

  

  

  

  
	<article class="post">

		
			<h1><a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut-Revisited">Blogging with VDJG: Part 1.75 - Vagrant, Docker & Jekyll - Return from the Void</a></h1>
		

		
<div class="archive_meta_wrapper">
	<time datetime="2016-04-16">April 16, 2016</time>
	<ul class="tag_list">
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging-w-vdjg">blogging-w-vdjg</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/vagrant">vagrant</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/docker">docker</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/github">github</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/jekyll">jekyll</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging">blogging</a>
	    </li>
	  
	</ul>
</div>


		<div class="post-content"><p>Walking away from a project and coming back about a month later is a great way to test the user-friendliness / accessibility of a solution! I must have forgotten … nearly everything … about how I set this blog up. … When I went to make an update, I even started out in the wrong place!</p>

<p>So here are the gotcha’s that became apparent to me as I tried to break back into blogging.</p>

<h3 id="gotcha-1">Gotcha #1</h3>

<p>The <a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut">short cut</a> that includes a custom Vagrantfile meant to encapsulate my custom script for executing Jekyll inside of docker inside of Vagrant … leaves the git repo for phusion’s baseimage-docker in a mixed state:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">➔ git status
On branch master
Your branch is up-to-date with &#39;origin/master&#39;.
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

        modified:   Vagrantfile

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

        data/
        exec-jekyll.sh

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

personal/phusion-jekyll/baseimage-docker on master [!?]</code></pre></div>

<p>While this looks like something was left incomplete, it’s not. I might revisit this in the future.</p>

<h3 id="gotcha-2">Gotcha #2</h3>

<p><code>vagrant up</code> is not the only thing that needs to be executed to get jekyll going. <code>vagrant up</code> by itself really only sets up phusion’s baseimage. When it runs, it prints out this ( somewhat confusing ) message:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">==&gt; default: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==&gt; default: flag to force provisioning. Provisioners marked to run always will still run.</code></pre></div>

<p>One might wonder: why run <code>vagrant provision</code> when the message just said that the machine is already provisioned. In fact, running <code>vagrant provision</code> is exactly the the thing needed to kick off my custom script ( which kicks off jekyll - within Vagrant )</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">➔ vagrant provision
==&gt; default: Running provisioner: shell...
    default: Running: /var/folders/9s/320v29913qs9j6kzxnqv7smclw01rh/T/vagrant-shell20160416-8
3777-1t0dsij.sh
==&gt; default: stdin: is not a tty
==&gt; default: jekyll_runtime
==&gt; default: jekyll_runtime
==&gt; default: Running Jekyll!
==&gt; default: Github does not allow user dependencies.
==&gt; default: Configuration file: /srv/jekyll/_config.yml
==&gt; default:             Source: /srv/jekyll
==&gt; default:        Destination: /srv/jekyll/_site
==&gt; default:       Generating...
==&gt; default:                     done.</code></pre></div>

<p>So, two gotcha’s later, and I’m back in business. As far as ramping back up on cold projects goes, that’s not too bad.</p>

</div>

	</article>

  

  
	<article class="post">

		
			<h1><a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut">Blogging with VDJG: Part 1.5 - Vagrant, Docker & Jekyll - Shortcut!</a></h1>
		

		
<div class="archive_meta_wrapper">
	<time datetime="2016-03-08">March  8, 2016</time>
	<ul class="tag_list">
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging-w-vdjg">blogging-w-vdjg</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/vagrant">vagrant</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/docker">docker</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/github">github</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/jekyll">jekyll</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging">blogging</a>
	    </li>
	  
	</ul>
</div>


		<div class="post-content"><p>I just finished going through all of the steps of how I created the vagrant-docker-jekyll combo that I use to blog with.</p>

<p>… And then I realized … the whole point of vagrant and docker is to be able to create an environment that can be replicated … so it should theoretically be possible for me to set up the entire environment and provide a few short lines to get the whole thing working, right?  Right.</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">git clone https://github.com/phusion/baseimage-docker.git
cd baseimage-docker
mkdir data
curl https://raw.githubusercontent.com/cognitiaclaeves/source.cognitiaclaeves.github.io/develop/source-files/Vagrantfile &gt; Vagrantfile
curl https://raw.githubusercontent.com/cognitiaclaeves/source.cognitiaclaeves.github.io/develop/source-files/exec-jekyll.sh &gt; exec-jekyll.sh
chmod +x exec-jekyll.sh
vagrant up</code></pre></div>

<blockquote>
  <p>Update 4/16/2016 –
If you don’t see</p>

</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; ==&gt; default: Running Jekyll!
&gt; ==&gt; default: Github does not allow user dependencies.
&gt; ==&gt; default: Configuration file: /srv/jekyll/_config.yml
&gt; ==&gt; default:             Source: /srv/jekyll
&gt; ==&gt; default:        Destination: /srv/jekyll/_site
&gt; ==&gt; default:       Generating...
&gt; ==&gt; default:                     done.
&gt;</code></pre></div>

<blockquote>

  <p>Then enter this:
<code>vagrant provision</code></p>
</blockquote>

<p>For more details, see <a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut-Revisited">the next post in the series</a>.</p>
</div>

	</article>

  

  

  
	<article class="post">

		
			<h1><a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Github">Blogging with VDJG: Part 1 - Vagrant, Docker & Jekyll</a></h1>
		

		
<div class="archive_meta_wrapper">
	<time datetime="2016-03-03">March  3, 2016</time>
	<ul class="tag_list">
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging-w-vdjg">blogging-w-vdjg</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/vagrant">vagrant</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/docker">docker</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/github">github</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/jekyll">jekyll</a>
	    </li>
	  
	    <li class="tag_list_item">
	      <a class="tag_list_link" href="/tag/blogging">blogging</a>
	    </li>
	  
	</ul>
</div>


		<div class="post-content"><blockquote>
  <p>This blog is set up to be able to add and view new entries offline ( as text files ), and then push changes into a source repository to trigger live site updates ( as website files ). I use a Jekyll Docker container running in Vagrant to take the site from text files to HTML.</p>

  <p>My process was inspired by a blogging process demonstrated by Boyd Boyd Hemphill at a devops / docker / cloud meetup, which he published on <a href="http://behemphi.github.io/github-pages/docker/2015/12/02/github-pages-with-docker.html">his blog</a></p>

  <p>This series covers the process I set up, in detail. In the first part, I cover everything short of publishing it live. In the second part, I cover publishing it live, and in the third part, I cover what it looks like when I create a new blog entry.</p>
</blockquote>

<p>I like to show all my work.  But if you just want to get a blog up in a hurry with this method, I made a <a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut">short cut</a>!</p>

<p>( This post is currently in progress; there will be clean-up later. )</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">~/personal
➔ mkdir phusion-jekyll; cd phusion-jekyll

~/personal/phusion-jekyll
➔ git clone https://github.com/phusion/baseimage-docker.git
Cloning into &#39;baseimage-docker&#39;...
remote: Counting objects: 1193, done.
remote: Total 1193 (delta 0), reused 0 (delta 0), pack-reused 1193
Receiving objects: 100% (1193/1193), 1.48 MiB | 1.57 MiB/s, done.
Resolving deltas: 100% (699/699), done.
Checking connectivity... done.

~/personal/phusion-jekyll
➔ cd baseimage-docker

personal/phusion-jekyll/baseimage-docker on master
➔ ls
CONTRIBUTING.md Makefile README_zh_tw.md install-tools.sh
Changelog.md README.md Vagrantfile test
LICENSE.txt README_ZH_cn_.md image tools

personal/phusion-jekyll/baseimage-docker on master
➔ vagrant up</code></pre></div>

<blockquote>
  <p>Warning: The next line causes vagrant to allow running VM instance to access the files on your local machine. Know what you’re doing when you give any VM or container access to your local machine.</p>
</blockquote>

<p>For the sake of convenience, I want a folder in the VM to directly reference my work folder (future github) folder, so I add this line:</p>

<p><code>config.vm.synced_folder "data", "/home/vagrant/data"</code></p>

<div class="highlight"><pre><code class="language-text" data-lang="text">➔ tail -6 Vagrantfile
    config.vm.provision :shell, :inline =&gt; $script
  end

  config.vm.synced_folder &quot;data&quot;, &quot;/home/vagrant/data&quot;

end</code></pre></div>

<p>Then I create the data folder and restart the vagrant box:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">personal/phusion-jekyll/baseimage-docker on master [!]
➔ mkdir data; vagrant halt; vagrant up

==&gt; default: Attempting graceful shutdown of VM...

Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
...</code></pre></div>

<p>My new folder is at the top of this list:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">==&gt; default: Mounting shared folders...
default: /home/vagrant/data =&gt; /Users/jno/personal/phusion-jekyll/baseimage-docker/data
default: /vagrant/baseimage-docker =&gt; /Users/jno/personal/phusion-jekyll/baseimage-docker
default: /vagrant =&gt; /Users/jno/personal/phusion-jekyll/baseimage-docker</code></pre></div>

<p>Next, I run the following in the vagrant session, to build the initial files:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">cd data
docker run \
  --interactive \
  --label=jekyll \
  --publish 4000:4000 \
  --rm \ 
  --tty \
  --volume=$(pwd):/srv/jekyll 
  jekyll/jekyll:pages jekyll new . --force</code></pre></div>

<blockquote>
  <p>The volume specification above is similar to the shared folder mount earlier, except for containers. At this time, this is considered more dangerous, by some. In this case, it’s pretty safe, as it only allows the docker container direct access to a path in the VM, and not your localhost.</p>
</blockquote>

<p>I was going to include a screenshot here of what it should look like when the above command is run, but I spent the time making the <a href="/light/blog/Blogging-with-Vagrant-Docker-Jekyll-Shortcut">short cut</a> instead.</p>

<p>.. and create this file (phusion-jekyll/baseimage-docker/exec-jekyll.sh), to run the jekyll container:</p>

<div class="highlight"><pre><code class="language-docker" data-lang="docker"><span class="nb">cd</span> /home/vagrant/data
docker stop jekyll_runtime 2&gt; /dev/null
docker rm -v jekyll_runtime 2&gt; /dev/null
docker run <span class="err">\</span>
    --env <span class="nv">FORCE_POLLING</span><span class="o">=</span><span class="nb">true</span> <span class="err">\</span>
    --env <span class="nv">JEKYLL_ENV</span><span class="o">=</span>development <span class="err">\</span>
    --env <span class="nv">VERBOSE</span><span class="o">=</span><span class="nb">true</span> <span class="err">\</span>
    --label<span class="o">=</span>jekyll <span class="err">\</span>
    --name<span class="o">=</span>jekyll_runtime <span class="err">\</span>
    --publish <span class="s2">&quot;0.0.0.0:4000:80&quot;</span> <span class="err">\</span>
    --rm <span class="err">\</span>
    --volume<span class="o">=</span><span class="s2">&quot;$(pwd):/srv/jekyll&quot;</span> <span class="err">\</span>
    jekyll/jekyll:pages jekyll build --watch</code></pre></div>

<p>… and make the file executable:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">➔ chmod +x exec-jekyll.sh</code></pre></div>

<p>To make the webserver in the container accessible, and to execute my new script, I add these lines to the Vagrantfile that I edited before:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">...

  config.vm.synced_folder &quot;data&quot;, &quot;/home/vagrant/data&quot;
  config.vm.network :forwarded_port, guest: 4000, host: 4000
  config.vm.provision &quot;shell&quot;, path: &quot;exec-jekyll.sh&quot;
end</code></pre></div>

<p><code>vagrant provision</code> runs the script:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">personal/phusion-jekyll/baseimage-docker on master [!]
➔ vagrant provision
==&gt; default: Running provisioner: shell...
        default: Running: /var/folders/9s/320v29913qs9j6kzxnqv7smclw01rh/T/vagrant-shell201
60302-97040-1s32frt.sh
==&gt; default: stdin: is not a tty
==&gt; default: jekyll_runtime
==&gt; default: Github does not allow user dependencies.
==&gt; default: Configuration file: /srv/jekyll/_config.yml
==&gt; default: Source: /srv/jekyll
==&gt; default: Destination: /srv/jekyll/_site
==&gt; default: Generating...
==&gt; default: done.
==&gt; default: Auto-regeneration: enabled for &#39;/srv/jekyll&#39;</code></pre></div>

<p>Now, I can browse to: http://localhost:4000, and click on the “Welcome to Jekyll” link.</p>

<p>This link was generated from data/_posts/[date]-welcome-to-jekyll.markdown</p>

<p>I switch to another terminal and edit the file locally:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Welcome</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Jekyll!&quot;</span>
<span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span> 
<span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jekyll update</span>
<span class="nn">---</span>
<span class="l-Scalar-Plain">You’ll find this post in your `_posts` directory. ...</span></code></pre></div>

<p>I change the above to:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Welcome</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Jekyll!&quot;</span>
<span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">...</span> 
<span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jekyll update</span>
<span class="nn">---</span>
<span class="l-Scalar-Plain">You’ll find this SAMPLE post in your `_posts` directory. ...</span></code></pre></div>

<p>and when I save the file, I see activity in the previous terminal session:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">...
==&gt; default: done.
==&gt; default: Auto-regeneration: enabled for &#39;/srv/jekyll&#39;
==&gt; default: Regenerating: 1 file(s) changed at 2016-03-02 23:47:21</code></pre></div>

<p>Finally, when I refresh the localhost:4000, it’s updated!</p>

<p>When I’m finished updating my site, I take the vagrant box down:</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">==&gt; default:       Regenerating: 1 file(s) changed at 2016-03-03 15:00:13
==&gt; default: ...done in 0.860794742 seconds.
^C==&gt; default: Waiting for cleanup before exiting...
^C==&gt; default: Exiting immediately, without cleanup!

personal/phusion-jekyll/baseimage-docker on master [!?]
➔ vagrant halt
==&gt; default: Attempting graceful shutdown of VM...

personal/phusion-jekyll/baseimage-docker on master [!?]</code></pre></div>

<p>That’s the process. Be sure to check out my shortcut for a handy script that does all the work for you!</p>

<p>I actually do a little more work to get the switchable theme in my static website. This work amounts to mangling the generated files with the use of a bash and a python script.</p>

<p>For the next blog in this series, I’ll post how to easily work github pages into this, and then my steps to create a new blog entry, after all the setup is done.</p>
</div>

	</article>

  

  





	<div class="postnavigation">

		
			<span class="nope left">&larr; Newer</span>
		

		<span class="pages">Page 1 of 2</span>

		
			<a class="next right" href="/page2/">Older &rarr;</a>
		

	</div>


    </div>

    



  </div>


    <footer id="footer">
  <p class="copyright">Copyright &copy; 2016 Zen Techie. 
      <br />Powered by <a href="http://jekyllrb.com">Jekyll</a>, 
      <a href="http://ethanschoonover.com/solarized#features"> Solarized </a>
      theme by <a href="http://www.webmaster-source.com">Matt Harzewski</a>
  </p>
  </footer>




  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
  <script src="/assets/js/jquery.mobilemenu.min.js"></script>

  <script>
    $(document).ready(function(){
      $('#sidebar nav ul').mobileMenu({'topOptionText': 'Menu', 'prependTo': '#sidebar nav'});
    });
  </script>


</body>
</html>
